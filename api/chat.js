// API/chat.js
// Version corrig√©e pour le chatbot FAP Expert

module.exports = async (req, res) => {
  // Headers CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // G√©rer les requ√™tes OPTIONS (preflight)
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Accepter seulement POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message, session_id } = req.body;

    if (!message || !session_id) {
      return res.status(400).json({
        success: false,
        error: 'Message et session_id sont requis'
      });
    }

    // Analyser le message pour d√©tecter les sympt√¥mes FAP
    const lowerMessage = message.toLowerCase();
    const symptoms = analyzeSymptoms(lowerMessage);
    const diagnosis = calculateDiagnosis(symptoms);
    
    // G√©n√©rer une r√©ponse appropri√©e
    const response = generateResponse(lowerMessage, symptoms, diagnosis);

    return res.status(200).json({
      success: true,
      response: response.text,
      confidence: response.confidence,
      top_causes: response.topCauses,
      ctas: response.ctas,
      session_state: 'active',
      current_progress: response.progress,
      question_type: response.questionType,
      options: response.options,
      recommended_workflow: response.workflow
    });

  } catch (error) {
    console.error('Erreur chat:', error);
    return res.status(500).json({
      success: false,
      error: 'Erreur serveur',
      message: error.message
    });
  }
};

// Fonction pour analyser les sympt√¥mes
function analyzeSymptoms(message) {
  const symptoms = {
    smoke_color: null,
    power_loss: false,
    warning_light: false,
    error_code: null,
    high_consumption: false
  };

  // D√©tection de fum√©e
  if (message.includes('fum√©e noire') || message.includes('fumee noire')) {
    symptoms.smoke_color = 'black';
  } else if (message.includes('fum√©e blanche') || message.includes('fumee blanche')) {
    symptoms.smoke_color = 'white';
  } else if (message.includes('fum√©e bleue') || message.includes('fumee bleue')) {
    symptoms.smoke_color = 'blue';
  }

  // Perte de puissance
  if (message.includes('perte de puissance') || message.includes('perte puissance')) {
    symptoms.power_loss = true;
  }

  // Voyants
  if (message.includes('voyant') || message.includes('t√©moin')) {
    symptoms.warning_light = true;
  }

  // Codes erreur
  const errorMatch = message.match(/p[0-9]{4}/i);
  if (errorMatch) {
    symptoms.error_code = errorMatch[0].toUpperCase();
  }

  // Consommation excessive
  if (message.includes('consomm') || message.includes('essence') || message.includes('diesel')) {
    symptoms.high_consumption = true;
  }

  return symptoms;
}

// Fonction pour calculer le diagnostic
function calculateDiagnosis(symptoms) {
  const scores = {
    clogged_filter: 0,
    sensor_failure: 0,
    additive_issue: 0,
    regeneration_needed: 0
  };

  // Calcul bas√© sur les sympt√¥mes
  if (symptoms.smoke_color === 'black') {
    scores.clogged_filter += 0.4;
    scores.regeneration_needed += 0.2;
  }

  if (symptoms.power_loss) {
    scores.clogged_filter += 0.3;
    scores.regeneration_needed += 0.2;
  }

  if (symptoms.warning_light) {
    scores.sensor_failure += 0.2;
    scores.clogged_filter += 0.2;
  }

  if (symptoms.error_code) {
    if (['P2002', 'P2003'].includes(symptoms.error_code)) {
      scores.clogged_filter += 0.5;
    } else if (['P2452', 'P2453'].includes(symptoms.error_code)) {
      scores.sensor_failure += 0.5;
    }
  }

  // Normaliser les scores
  const total = Object.values(scores).reduce((a, b) => a + b, 0) || 1;
  for (const key in scores) {
    scores[key] = scores[key] / total;
  }

  return scores;
}

// Fonction pour g√©n√©rer la r√©ponse
function generateResponse(message, symptoms, diagnosis) {
  const response = {
    text: '',
    confidence: 0,
    topCauses: [],
    ctas: [],
    progress: 0,
    questionType: null,
    options: null,
    workflow: null
  };

  // Trier les causes par score
  const sortedCauses = Object.entries(diagnosis)
    .sort(([, a], [, b]) => b - a)
    .map(([cause, score]) => ({
      name: getCauseName(cause),
      score: score,
      description: getCauseDescription(cause)
    }));

  response.topCauses = sortedCauses.slice(0, 3);
  response.confidence = sortedCauses[0].score;

  // Logique de r√©ponse selon le contexte
  if (message.includes('diagnostic rapide') || message.includes('commencer')) {
    response.text = "Parfait ! Je vais analyser votre probl√®me de FAP rapidement.\n\n**Question 1:** Observez-vous de la fum√©e √† l'√©chappement ?";
    response.questionType = 'multiple_choice';
    response.options = [
      { id: 'black_smoke', label: 'üí® Fum√©e noire' },
      { id: 'white_smoke', label: '‚òÅÔ∏è Fum√©e blanche' },
      { id: 'blue_smoke', label: 'üîµ Fum√©e bleue' },
      { id: 'no_smoke', label: '‚úÖ Pas de fum√©e' }
    ];
    response.progress = 10;
    response.ctas = [
      { type: 'info', title: 'üí° Besoin d\'aide ?', action: 'help' }
    ];
  }
  else if (symptoms.smoke_color || symptoms.power_loss || symptoms.warning_light) {
    // Diagnostic bas√© sur les sympt√¥mes
    const topCause = sortedCauses[0];
    
    if (topCause.score > 0.7) {
      response.text = `D'apr√®s mon analyse, le probl√®me principal est : **${topCause.name}**\n\n`;
      response.text += `Probabilit√©: ${Math.round(topCause.score * 100)}%\n\n`;
      
      if (symptoms.smoke_color === 'black' && symptoms.power_loss) {
        response.text += "‚ö†Ô∏è **Situation urgente** : La combinaison fum√©e noire + perte de puissance indique un FAP tr√®s encrass√© n√©cessitant une intervention rapide.";
        response.ctas = [
          { type: 'urgent', title: 'üö® Nettoyage urgent', action: 'book_cleaning' },
          { type: 'primary', title: 'üõ£Ô∏è R√©g√©n√©ration autoroute', action: 'highway_regeneration' }
        ];
        response.progress = 80;
      } else {
        response.text += "Je recommande d'agir rapidement pour √©viter des dommages plus importants.";
        response.ctas = [
          { type: 'primary', title: 'üîß Voir les solutions', action: 'show_solutions' },
          { type: 'secondary', title: 'üìä Diagnostic complet', action: 'full_diagnosis' }
        ];
        response.progress = 60;
      }
      
      // Ajouter un workflow si pertinent
      if (diagnosis.clogged_filter > 0.5) {
        response.workflow = {
          name: 'Nettoyage FAP professionnel',
          category: 'professional',
          success_probability: 0.85,
          steps: [
            { step: 1, title: 'Diagnostic', instructions: 'V√©rification codes et √©tat FAP', duration: '30 min' },
            { step: 2, title: 'Nettoyage', instructions: 'Application produit Re-Fap', duration: '2h' },
            { step: 3, title: 'Test', instructions: 'V√©rification apr√®s nettoyage', duration: '30 min' }
          ]
        };
      }
    } else {
      response.text = "J'ai besoin de plus d'informations pour affiner le diagnostic.\n\n**Avez-vous aussi une perte de puissance ?**";
      response.questionType = 'yes_no';
      response.ctas = [
        { type: 'primary', title: '‚úÖ Oui', action: 'answer_yes' },
        { type: 'primary', title: '‚ùå Non', action: 'answer_no' }
      ];
      response.progress = 40;
    }
  }
  else {
    // Message par d√©faut
    response.text = "Je suis Julien, expert FAP. Je peux diagnostiquer pr√©cis√©ment votre probl√®me de filtre √† particules.\n\nPour commencer, d√©crivez-moi vos sympt√¥mes :\n‚Ä¢ Fum√©e √† l'√©chappement ?\n‚Ä¢ Voyants allum√©s ?\n‚Ä¢ Perte de puissance ?\n‚Ä¢ Codes d'erreur ?";
    response.ctas = [
      { type: 'primary', title: 'üöÄ Diagnostic rapide', action: 'quick_diagnosis' },
      { type: 'secondary', title: 'üìã Analyse compl√®te', action: 'full_analysis' }
    ];
    response.progress = 0;
  }

  return response;
}

// Fonctions utilitaires
function getCauseName(cause) {
  const names = {
    clogged_filter: 'FAP encrass√©',
    sensor_failure: 'D√©faillance capteur',
    additive_issue: 'Probl√®me d\'additif FAP',
    regeneration_needed: 'R√©g√©n√©ration n√©cessaire'
  };
  return names[cause] || cause;
}

function getCauseDescription(cause) {
  const descriptions = {
    clogged_filter: 'Le filtre est obstru√© par les particules de suie',
    sensor_failure: 'Un capteur du syst√®me FAP dysfonctionne',
    additive_issue: 'Le niveau d\'additif FAP est insuffisant',
    regeneration_needed: 'Le FAP a besoin d\'un cycle de r√©g√©n√©ration'
  };
  return descriptions[cause] || '';
}
