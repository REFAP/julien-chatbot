// api/chat.js
// DUAL BRAIN SYSTEM - VERSION COMPL√àTE AVEC VRAIES APIs ACTIV√âES
// CORRIG√â POUR CL√â_API_OPENAI

export default async function handler(req, res) {
  // CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      error: 'Seule la m√©thode POST est support√©e'
    });
  }

  try {
    const { message, options = {} } = req.body;

    if (!message) {
      return res.status(400).json({
        success: false,
        error: 'Message requis'
      });
    }

    console.log(`üß† Dual Brain: "${message.substring(0, 50)}..."`);

    // D√©tection du mode et analyse
    const isPremiumUser = options.premiumToken ? validatePremiumToken(options.premiumToken) : false;
    const autoTopic = detectAutoTopic(message);

    console.log(`üë§ Mode: ${isPremiumUser ? 'PREMIUM' : 'STANDARD'} | Auto: ${autoTopic.detected}`);

    let response;

    if (isPremiumUser) {
      // MODE PREMIUM : VRAI DUAL BRAIN ACTIV√â
      response = await processDualBrain(message, autoTopic);
    } else if (autoTopic.detected && autoTopic.confidence > 0.7) {
      // MODE CONVERSION : Opportunit√© d√©tect√©e
      response = await processConversionOpportunity(message, autoTopic);
    } else {
      // MODE STANDARD : Une seule API
      response = await processSingleAI(message, autoTopic);
    }

    return res.status(200).json({
      success: true,
      message: response.content,
      ...(response.premiumOffer ? { premiumOffer: response.premiumOffer } : {}),
      metadata: {
        strategy: response.strategy,
        confidence: response.confidence,
        aiUsed: response.aiUsed || 'simulation',
        timestamp: new Date().toISOString(),
        autoDetected: autoTopic.detected,
        premiumMode: isPremiumUser
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur Dual Brain:', error);
    return res.status(500).json({
      success: false,
      error: 'Erreur serveur',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
}

// üß† TRAITEMENT DUAL BRAIN PREMIUM - VRAIES APIs ACTIV√âES
async function processDualBrain(message, autoTopic) {
  console.log('üíé Mode Premium : VRAI DUAL BRAIN ACTIV√â !');
  
  try {
    // APPELS PARALL√àLES AUX VRAIES APIs
    const [claudeResult, openaiResult] = await Promise.allSettled([
      callClaudeAPI(message, { premium: true, autoTopic }),
      callOpenAIAPI(message, { premium: true, autoTopic })
    ]);

    console.log(`üìä R√©sultats APIs - Claude: ${claudeResult.status} | OpenAI: ${openaiResult.status}`);

    // FUSION INTELLIGENTE R√âELLE
    if (claudeResult.status === 'fulfilled' && openaiResult.status === 'fulfilled') {
      const fusedContent = createAdvancedFusion(claudeResult.value, openaiResult.value, message);
      
      return {
        content: `üß† **DUAL BRAIN PREMIUM ACTIV√â** üß†\n\n${fusedContent}\n\n---\n‚ú® *R√©ponse g√©n√©r√©e par la fusion intelligente Claude + OpenAI*`,
        strategy: 'real_dual_brain_fusion',
        confidence: 0.98,
        aiUsed: 'claude+openai_REAL'
      };
    } 
    
    // CLAUDE SEUL
    else if (claudeResult.status === 'fulfilled') {
      return {
        content: `üß† **CLAUDE PREMIUM ACTIV√â** üß†\n\n${claudeResult.value}\n\n---\nüí° *R√©ponse powered by Claude API* (OpenAI temporairement indisponible)`,
        strategy: 'claude_real_api',
        confidence: 0.92,
        aiUsed: 'claude_REAL'
      };
    } 
    
    // OPENAI SEUL
    else if (openaiResult.status === 'fulfilled') {
      return {
        content: `üé® **OPENAI PREMIUM ACTIV√â** üé®\n\n${openaiResult.value}\n\n---\nüöÄ *R√©ponse powered by OpenAI API* (Claude temporairement indisponible)`,
        strategy: 'openai_real_api',
        confidence: 0.88,
        aiUsed: 'openai_REAL'
      };
    } 
    
    // FALLBACK AVEC DEBUG
    else {
      const claudeError = claudeResult.reason?.message || 'Erreur inconnue';
      const openaiError = openaiResult.reason?.message || 'Erreur inconnue';
      
      console.error('üö® Erreurs APIs:', { claude: claudeError, openai: openaiError });
      
      return {
        content: `‚ö†Ô∏è **APIs temporairement indisponibles**\n\nüîß Debug Info:\n- Claude: ${claudeError}\n- OpenAI: ${openaiError}\n\nüì± Mode de secours activ√©:\n\n${simulateDualBrain(message, autoTopic, true).content}`,
        strategy: 'api_error_fallback',
        confidence: 0.70,
        aiUsed: 'simulation_with_debug'
      };
    }
    
  } catch (error) {
    console.error('üí• Erreur critique Dual Brain:', error);
    return simulateDualBrain(message, autoTopic, true);
  }
}

// üéØ TRAITEMENT OPPORTUNIT√â DE CONVERSION
async function processConversionOpportunity(message, autoTopic) {
  console.log('üéØ Mode Conversion : Opportunit√© d√©tect√©e');
  
  try {
    // Utilise la meilleure API disponible
    const aiResponse = await callBestAvailableAI(message, autoTopic);
    
    return {
      content: aiResponse,
      strategy: 'conversion_opportunity',
      confidence: 0.9,
      premiumOffer: {
        available: true,
        title: "üöÄ Acc√©dez √† notre IA Premium Dual Brain",
        description: "Obtenez des conseils ultra-pr√©cis avec notre technologie exclusive de fusion Claude + ChatGPT",
        benefits: [
          "üß† Fusion de 2 IA leaders pour une pr√©cision maximale",
          "üéØ Analyse technique approfondie et cr√©ative",
          "‚ö° R√©ponses personnalis√©es selon votre profil",
          "üí° Conseils d'experts automobiles exclusifs"
        ],
        callToAction: "üî• Activer le mode Premium",
        estimatedValue: autoTopic.urgency ? 35 : 25
      }
    };
    
  } catch (error) {
    console.error('‚ùå Erreur conversion:', error);
    return simulateDualBrain(message, autoTopic, false);
  }
}

// üì± TRAITEMENT STANDARD
async function processSingleAI(message, autoTopic) {
  console.log('üì± Mode Standard : IA simple');
  
  try {
    const aiResponse = await callBestAvailableAI(message, autoTopic);
    
    return {
      content: aiResponse + "\n\nüí° **Astuce** : Passez en mode Premium pour b√©n√©ficier de notre technologie Dual Brain exclusive (Claude + ChatGPT) !",
      strategy: 'standard_single_ai',
      confidence: 0.78,
      aiUsed: 'claude_or_openai_REAL'
    };
    
  } catch (error) {
    console.error('‚ùå Erreur standard:', error);
    return simulateDualBrain(message, autoTopic, false);
  }
}

// ü§ñ APPEL API CLAUDE - VERSION R√âELLE
async function callClaudeAPI(message, context) {
  if (!process.env.CLAUDE_API_KEY) {
    throw new Error('Claude API key manquante');
  }

  const prompt = context.premium && context.autoTopic ? 
    `En tant qu'expert automobile premium avec acc√®s aux derni√®res technologies, analysez pr√©cis√©ment cette question : "${message}". 

Fournissez une r√©ponse compl√®te incluant :
- Diagnostic technique pr√©cis
- Solutions recommand√©es par ordre de priorit√©  
- Conseils de s√©curit√© importants
- Estimation des co√ªts si pertinent
- Recommandations de professionnels

Adoptez un ton expert mais accessible.` :
    `R√©pondez de mani√®re pr√©cise et structur√©e √† cette question : "${message}". Soyez factuel et utile.`;

  console.log('üîµ Appel Claude API...');

  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': process.env.CLAUDE_API_KEY,
      'anthropic-version': '2023-06-01'
    },
    body: JSON.stringify({
      model: 'claude-3-sonnet-20240229',
      max_tokens: context.premium ? 1200 : 800,
      temperature: 0.7,
      messages: [{ role: 'user', content: prompt }]
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Claude API error ${response.status}: ${errorText}`);
  }

  const data = await response.json();
  console.log('‚úÖ Claude r√©ponse re√ßue');
  return data.content[0].text;
}

// ü§ñ APPEL API OPENAI - VERSION CORRIG√âE POUR CL√â_API_OPENAI
async function callOpenAIAPI(message, context) {
  if (!process.env.CL√â_API_OPENAI) {
    throw new Error('OpenAI API key manquante (CL√â_API_OPENAI)');
  }

  const prompt = context.premium && context.autoTopic ?
    `En tant qu'assistant premium ultra-performant sp√©cialis√© en automobile, r√©pondez de mani√®re cr√©ative, engageante et pr√©cise √† : "${message}". 

Votre r√©ponse doit √™tre :
- Accessible et facile √† comprendre
- Engageante avec des exemples concrets
- Cr√©ative dans les solutions propos√©es
- Rassurante mais honn√™te sur les enjeux
- Incluant des conseils pratiques imm√©diats

Adoptez un ton chaleureux d'expert passionn√©.` :
    `R√©pondez de mani√®re engageante et utile √† cette question : "${message}". Soyez cr√©atif tout en restant pr√©cis.`;

  console.log('üü¢ Appel OpenAI API (CL√â_API_OPENAI)...');

  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.CL√â_API_OPENAI}`
    },
    body: JSON.stringify({
      model: 'gpt-4',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: context.premium ? 1200 : 800,
      temperature: 0.8
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`OpenAI API error ${response.status}: ${errorText}`);
  }

  const data = await response.json();
  console.log('‚úÖ OpenAI r√©ponse re√ßue');
  return data.choices[0].message.content;
}

// üîÑ MEILLEURE API DISPONIBLE
async function callBestAvailableAI(message, autoTopic) {
  // Priorit√© Claude pour les questions techniques auto
  if (autoTopic.detected) {
    try {
      return await callClaudeAPI(message, { autoTopic });
    } catch (error) {
      console.log('Claude indisponible, fallback OpenAI');
      return await callOpenAIAPI(message, { autoTopic });
    }
  } else {
    // Priorit√© OpenAI pour les questions g√©n√©rales
    try {
      return await callOpenAIAPI(message, { autoTopic });
    } catch (error) {
      console.log('OpenAI indisponible, fallback Claude');
      return await callClaudeAPI(message, { autoTopic });
    }
  }
}

// üß¨ FUSION AVANC√âE - V√âRITABLE ALGORITHME DUAL BRAIN
function createAdvancedFusion(claudeResponse, openaiResponse, originalMessage) {
  console.log('üß¨ Fusion avanc√©e Claude + OpenAI');
  
  // Analyse des forces de chaque r√©ponse
  const claudeStrengths = analyzeClaudeStrengths(claudeResponse);
  const openaiStrengths = analyzeOpenAIStrengths(openaiResponse);
  
  // Construction de la fusion optimale
  let fusedContent = '';
  
  // Structure principale : Claude (pr√©cision technique)
  const claudeSentences = claudeResponse.split(/[.!?]+/).filter(s => s.trim().length > 20);
  const openaiSentences = openaiResponse.split(/[.!?]+/).filter(s => s.trim().length > 20);
  
  // Introduction engageante d'OpenAI
  if (openaiSentences.length > 0 && openaiStrengths.engagement > 0.7) {
    fusedContent += `**${openaiSentences[0].trim()}.**\n\n`;
  }
  
  // Corps technique de Claude
  if (claudeSentences.length > 1) {
    fusedContent += `**Analyse technique :**\n${claudeSentences.slice(0, -1).join('. ')}.\n\n`;
  }
  
  // Conseils pratiques d'OpenAI
  const practicalAdvice = extractPracticalAdvice(openaiResponse);
  if (practicalAdvice) {
    fusedContent += `**Conseils pratiques :**\n${practicalAdvice}\n\n`;
  }
  
  // Conclusion de s√©curit√© de Claude
  const safetyAdvice = extractSafetyAdvice(claudeResponse);
  if (safetyAdvice) {
    fusedContent += `**Important - S√©curit√© :**\n${safetyAdvice}`;
  }
  
  return fusedContent.trim();
}

// Analyse des forces de Claude
function analyzeClaudeStrengths(response) {
  return {
    technical: /technique|m√©canisme|processus|diagnostic/.test(response.toLowerCase()) ? 1 : 0.5,
    safety: /s√©curit√©|danger|attention|prudence/.test(response.toLowerCase()) ? 1 : 0.5,
    structure: response.split('\n').length > 3 ? 0.9 : 0.6
  };
}

// Analyse des forces d'OpenAI
function analyzeOpenAIStrengths(response) {
  return {
    engagement: /vous|votre|je recommande|conseil/.test(response.toLowerCase()) ? 0.9 : 0.6,
    creativity: /exemple|imaginez|pensez/.test(response.toLowerCase()) ? 0.8 : 0.5,
    accessibility: response.split(' ').length / response.split('.').length < 25 ? 0.8 : 0.6
  };
}

// Extraction de conseils pratiques
function extractPracticalAdvice(response) {
  const practical = response.match(/(?:conseil|recommande|suggestion)[^.!?]*[.!?]/gi);
  return practical ? practical.join(' ') : null;
}

// Extraction de conseils de s√©curit√©
function extractSafetyAdvice(response) {
  const safety = response.match(/(?:s√©curit√©|attention|danger|prudence)[^.!?]*[.!?]/gi);
  return safety ? safety.join(' ') : null;
}

// üîç D√âTECTION SUJET AUTO - VERSION AM√âLIOR√âE
function detectAutoTopic(message) {
  const autoKeywords = [
    'voiture', 'auto', 'v√©hicule', 'moteur', 'frein', 'pneu', 'garage', 
    'r√©paration', 'entretien', 'vidange', 'r√©vision', 'panne', 'diagnostic',
    'carrosserie', 'm√©canique', 'huile', 'batterie', 'd√©marrage', 'embrayage',
    'transmission', 'suspension', 'direction', 'climatisation', '√©chappement'
  ];
  
  const urgencyKeywords = [
    'urgent', 'rapidement', 'vite', 'imm√©diatement', 'panne', 'ne d√©marre plus', 
    'danger', 'accident', 'fum√©e', 'bruit bizarre', 'probl√®me grave'
  ];
  
  const lowerMessage = message.toLowerCase();
  
  const foundKeywords = autoKeywords.filter(keyword => lowerMessage.includes(keyword));
  const foundUrgency = urgencyKeywords.some(keyword => lowerMessage.includes(keyword));
  
  return {
    detected: foundKeywords.length > 0,
    confidence: Math.min(foundKeywords.length * 0.25 + (foundUrgency ? 0.3 : 0), 1.0),
    keywords: foundKeywords,
    urgency: foundUrgency,
    category: foundKeywords.length > 2 ? 'specialist_needed' : 'general_auto',
    specialization: detectSpecialization(foundKeywords)
  };
}

// D√©tection de sp√©cialisation
function detectSpecialization(keywords) {
  if (keywords.some(k => ['frein', 'freinage'].includes(k))) return 'freinage';
  if (keywords.some(k => ['moteur', 'huile', 'vidange'].includes(k))) return 'moteur';
  if (keywords.some(k => ['pneu', 'roue'].includes(k))) return 'pneumatique';
  if (keywords.some(k => ['carrosserie', 'peinture'].includes(k))) return 'carrosserie';
  return 'general';
}

// üé´ VALIDATION TOKEN PREMIUM
function validatePremiumToken(token) {
  try {
    if (token === 'eyJ0ZXN0IjoidG9rZW4ifQ==') return true; // Token de test
    const tokenData = JSON.parse(Buffer.from(token, 'base64').toString());
    return Date.now() < tokenData.expiresAt;
  } catch {
    return false;
  }
}

// üé≠ SIMULATION AM√âLIOR√âE (FALLBACK)
function simulateDualBrain(message, autoTopic, isPremium) {
  const premiumPrefix = isPremium ? 'üíé **MODE PREMIUM** - ' : '';
  
  if (autoTopic.detected) {
    const urgencyText = autoTopic.urgency ? ' **URGENT** - ' : '';
    const specialistText = autoTopic.category === 'specialist_needed' ? 
      'Je recommande fortement de consulter un sp√©cialiste rapidement.' : 
      'Un contr√¥le chez un professionnel serait judicieux.';
    
    const partnerRecommendation = getPartnerRecommendation(autoTopic.specialization);
    
    return {
      content: `${premiumPrefix}üöó **Question automobile d√©tect√©e**${urgencyText}\n\n**Votre question :** "${message}"\n\n**Analyse :** ${specialistText}\n\n**Recommandation :** ${partnerRecommendation}\n\n${isPremium ? 'üî• **Analyse premium compl√®te fournie !**' : 'üí° **Conseil :** Passez en premium pour une analyse technique approfondie !'}`,
      strategy: isPremium ? 'premium_simulation' : 'standard_simulation',
      confidence: autoTopic.confidence,
      aiUsed: 'enhanced_simulation'
    };
  } else {
    return {
      content: `${premiumPrefix}Merci pour votre question : "${message}"\n\nJe suis votre assistant IA sp√©cialis√© automobile. ${isPremium ? 'Mode premium activ√© pour des r√©ponses ultra-pr√©cises !' : 'Pour des r√©ponses encore plus pr√©cises, d√©couvrez notre mode premium Dual Brain !'}\n\nüí° **Astuce :** Pour des questions automobiles, je suis particuli√®rement performant !`,
      strategy: isPremium ? 'premium_general' : 'standard_general',
      confidence: 0.7,
      aiUsed: 'enhanced_simulation'
    };
  }
}

// Recommandation de partenaire selon sp√©cialisation
function getPartnerRecommendation(specialization) {
  const recommendations = {
    freinage: 'Contactez MIDAS pour un diagnostic freinage complet et s√©curis√©.',
    moteur: 'Rendez-vous chez IDGARAGES pour une expertise moteur approfondie.',
    pneumatique: 'MIDAS ou IDGARAGES peuvent v√©rifier vos pneus et l\'√©quilibrage.',
    carrosserie: 'Pour la carrosserie, consultez un sp√©cialiste agr√©√© de votre assurance.',
    general: 'MIDAS, IDGARAGES ou votre garage de confiance peuvent vous aider.'
  };
  
  return recommendations[specialization] || recommendations.general;
}
